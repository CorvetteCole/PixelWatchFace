/*
 * Locationforecast_2_0
 * Weather forecast for a specified place
 *
 * OpenAPI spec version: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.corvettecole.pixelwatchface.api.met.models;

import com.google.gson.annotations.SerializedName;
import java.math.BigDecimal;
import java.util.Objects;

/**
 * Weather parameters valid for a specific point in time.
 */
public class ForecastTimeInstant {

  @SerializedName("cloud_area_fraction_low")
  private BigDecimal cloudAreaFractionLow = null;

  @SerializedName("cloud_area_fraction_high")
  private BigDecimal cloudAreaFractionHigh = null;

  @SerializedName("wind_speed")
  private BigDecimal windSpeed = null;

  @SerializedName("relative_humidity")
  private BigDecimal relativeHumidity = null;

  @SerializedName("wind_from_direction")
  private BigDecimal windFromDirection = null;

  @SerializedName("air_temperature")
  private BigDecimal airTemperature = null;

  @SerializedName("air_pressure_at_sea_level")
  private BigDecimal airPressureAtSeaLevel = null;

  @SerializedName("wind_speed_of_gust")
  private BigDecimal windSpeedOfGust = null;

  @SerializedName("cloud_area_fraction")
  private BigDecimal cloudAreaFraction = null;

  @SerializedName("dew_point_temperature")
  private BigDecimal dewPointTemperature = null;

  @SerializedName("fog_area_fraction")
  private BigDecimal fogAreaFraction = null;

  @SerializedName("cloud_area_fraction_medium")
  private BigDecimal cloudAreaFractionMedium = null;

  public ForecastTimeInstant cloudAreaFractionLow(BigDecimal cloudAreaFractionLow) {
    this.cloudAreaFractionLow = cloudAreaFractionLow;
    return this;
  }

  /**
   * Amount of sky covered by clouds at low elevation.
   *
   * @return cloudAreaFractionLow
   **/
  public BigDecimal getCloudAreaFractionLow() {
    return cloudAreaFractionLow;
  }

  public void setCloudAreaFractionLow(BigDecimal cloudAreaFractionLow) {
    this.cloudAreaFractionLow = cloudAreaFractionLow;
  }

  public ForecastTimeInstant cloudAreaFractionHigh(BigDecimal cloudAreaFractionHigh) {
    this.cloudAreaFractionHigh = cloudAreaFractionHigh;
    return this;
  }

  /**
   * Amount of sky covered by clouds at high elevation.
   *
   * @return cloudAreaFractionHigh
   **/
  public BigDecimal getCloudAreaFractionHigh() {
    return cloudAreaFractionHigh;
  }

  public void setCloudAreaFractionHigh(BigDecimal cloudAreaFractionHigh) {
    this.cloudAreaFractionHigh = cloudAreaFractionHigh;
  }

  public ForecastTimeInstant windSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  /**
   * Speed of wind
   *
   * @return windSpeed
   **/
  public BigDecimal getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(BigDecimal windSpeed) {
    this.windSpeed = windSpeed;
  }

  public ForecastTimeInstant relativeHumidity(BigDecimal relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
    return this;
  }

  /**
   * Amount of humidity in the air.
   *
   * @return relativeHumidity
   **/
  public BigDecimal getRelativeHumidity() {
    return relativeHumidity;
  }

  public void setRelativeHumidity(BigDecimal relativeHumidity) {
    this.relativeHumidity = relativeHumidity;
  }

  public ForecastTimeInstant windFromDirection(BigDecimal windFromDirection) {
    this.windFromDirection = windFromDirection;
    return this;
  }

  /**
   * The directon which moves towards
   *
   * @return windFromDirection
   **/
  public BigDecimal getWindFromDirection() {
    return windFromDirection;
  }

  public void setWindFromDirection(BigDecimal windFromDirection) {
    this.windFromDirection = windFromDirection;
  }

  public ForecastTimeInstant airTemperature(BigDecimal airTemperature) {
    this.airTemperature = airTemperature;
    return this;
  }

  /**
   * Air temperature
   *
   * @return airTemperature
   **/
  public BigDecimal getAirTemperature() {
    return airTemperature;
  }

  public void setAirTemperature(BigDecimal airTemperature) {
    this.airTemperature = airTemperature;
  }

  public ForecastTimeInstant airPressureAtSeaLevel(BigDecimal airPressureAtSeaLevel) {
    this.airPressureAtSeaLevel = airPressureAtSeaLevel;
    return this;
  }

  /**
   * Air pressure at sea level
   *
   * @return airPressureAtSeaLevel
   **/
  public BigDecimal getAirPressureAtSeaLevel() {
    return airPressureAtSeaLevel;
  }

  public void setAirPressureAtSeaLevel(BigDecimal airPressureAtSeaLevel) {
    this.airPressureAtSeaLevel = airPressureAtSeaLevel;
  }

  public ForecastTimeInstant windSpeedOfGust(BigDecimal windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
    return this;
  }

  /**
   * Speed of wind gust
   *
   * @return windSpeedOfGust
   **/
  public BigDecimal getWindSpeedOfGust() {
    return windSpeedOfGust;
  }

  public void setWindSpeedOfGust(BigDecimal windSpeedOfGust) {
    this.windSpeedOfGust = windSpeedOfGust;
  }

  public ForecastTimeInstant cloudAreaFraction(BigDecimal cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
    return this;
  }

  /**
   * Amount of sky covered by clouds.
   *
   * @return cloudAreaFraction
   **/
  public BigDecimal getCloudAreaFraction() {
    return cloudAreaFraction;
  }

  public void setCloudAreaFraction(BigDecimal cloudAreaFraction) {
    this.cloudAreaFraction = cloudAreaFraction;
  }

  public ForecastTimeInstant dewPointTemperature(BigDecimal dewPointTemperature) {
    this.dewPointTemperature = dewPointTemperature;
    return this;
  }

  /**
   * Dew point temperature at sea level
   *
   * @return dewPointTemperature
   **/
  public BigDecimal getDewPointTemperature() {
    return dewPointTemperature;
  }

  public void setDewPointTemperature(BigDecimal dewPointTemperature) {
    this.dewPointTemperature = dewPointTemperature;
  }

  public ForecastTimeInstant fogAreaFraction(BigDecimal fogAreaFraction) {
    this.fogAreaFraction = fogAreaFraction;
    return this;
  }

  /**
   * Amount of area covered by fog.
   *
   * @return fogAreaFraction
   **/
  public BigDecimal getFogAreaFraction() {
    return fogAreaFraction;
  }

  public void setFogAreaFraction(BigDecimal fogAreaFraction) {
    this.fogAreaFraction = fogAreaFraction;
  }

  public ForecastTimeInstant cloudAreaFractionMedium(BigDecimal cloudAreaFractionMedium) {
    this.cloudAreaFractionMedium = cloudAreaFractionMedium;
    return this;
  }

  /**
   * Amount of sky covered by clouds at medium elevation.
   *
   * @return cloudAreaFractionMedium
   **/
  public BigDecimal getCloudAreaFractionMedium() {
    return cloudAreaFractionMedium;
  }

  public void setCloudAreaFractionMedium(BigDecimal cloudAreaFractionMedium) {
    this.cloudAreaFractionMedium = cloudAreaFractionMedium;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastTimeInstant forecastTimeInstant = (ForecastTimeInstant) o;
    return Objects.equals(this.cloudAreaFractionLow, forecastTimeInstant.cloudAreaFractionLow) &&
        Objects.equals(this.cloudAreaFractionHigh, forecastTimeInstant.cloudAreaFractionHigh) &&
        Objects.equals(this.windSpeed, forecastTimeInstant.windSpeed) &&
        Objects.equals(this.relativeHumidity, forecastTimeInstant.relativeHumidity) &&
        Objects.equals(this.windFromDirection, forecastTimeInstant.windFromDirection) &&
        Objects.equals(this.airTemperature, forecastTimeInstant.airTemperature) &&
        Objects.equals(this.airPressureAtSeaLevel, forecastTimeInstant.airPressureAtSeaLevel) &&
        Objects.equals(this.windSpeedOfGust, forecastTimeInstant.windSpeedOfGust) &&
        Objects.equals(this.cloudAreaFraction, forecastTimeInstant.cloudAreaFraction) &&
        Objects.equals(this.dewPointTemperature, forecastTimeInstant.dewPointTemperature) &&
        Objects.equals(this.fogAreaFraction, forecastTimeInstant.fogAreaFraction) &&
        Objects.equals(this.cloudAreaFractionMedium, forecastTimeInstant.cloudAreaFractionMedium);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudAreaFractionLow, cloudAreaFractionHigh, windSpeed, relativeHumidity,
        windFromDirection, airTemperature, airPressureAtSeaLevel, windSpeedOfGust,
        cloudAreaFraction, dewPointTemperature, fogAreaFraction, cloudAreaFractionMedium);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastTimeInstant {\n");

    sb.append("    cloudAreaFractionLow: ").append(toIndentedString(cloudAreaFractionLow))
        .append("\n");
    sb.append("    cloudAreaFractionHigh: ").append(toIndentedString(cloudAreaFractionHigh))
        .append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("    relativeHumidity: ").append(toIndentedString(relativeHumidity)).append("\n");
    sb.append("    windFromDirection: ").append(toIndentedString(windFromDirection)).append("\n");
    sb.append("    airTemperature: ").append(toIndentedString(airTemperature)).append("\n");
    sb.append("    airPressureAtSeaLevel: ").append(toIndentedString(airPressureAtSeaLevel))
        .append("\n");
    sb.append("    windSpeedOfGust: ").append(toIndentedString(windSpeedOfGust)).append("\n");
    sb.append("    cloudAreaFraction: ").append(toIndentedString(cloudAreaFraction)).append("\n");
    sb.append("    dewPointTemperature: ").append(toIndentedString(dewPointTemperature))
        .append("\n");
    sb.append("    fogAreaFraction: ").append(toIndentedString(fogAreaFraction)).append("\n");
    sb.append("    cloudAreaFractionMedium: ").append(toIndentedString(cloudAreaFractionMedium))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

