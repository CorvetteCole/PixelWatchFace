/*
 * Locationforecast_2_0
 * Weather forecast for a specified place
 *
 * OpenAPI spec version: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.corvettecole.pixelwatchface.api.met.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/**
 * METJSONForecast
 */

public class METJSONForecast {

  @SerializedName("properties")
  private Forecast properties = null;
  @SerializedName("type")
  private TypeEnum type = null;
  @SerializedName("geometry")
  private PointGeometry geometry = null;

  public METJSONForecast properties(Forecast properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   *
   * @return properties
   **/
  public Forecast getProperties() {
    return properties;
  }

  public void setProperties(Forecast properties) {
    this.properties = properties;
  }

  public METJSONForecast type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   **/
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public METJSONForecast geometry(PointGeometry geometry) {
    this.geometry = geometry;
    return this;
  }

  /**
   * Get geometry
   *
   * @return geometry
   **/
  public PointGeometry getGeometry() {
    return geometry;
  }

  public void setGeometry(PointGeometry geometry) {
    this.geometry = geometry;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    METJSONForecast meTJSONForecast = (METJSONForecast) o;
    return Objects.equals(this.properties, meTJSONForecast.properties) &&
        Objects.equals(this.type, meTJSONForecast.type) &&
        Objects.equals(this.geometry, meTJSONForecast.geometry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(properties, type, geometry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class METJSONForecast {\n");

    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    geometry: ").append(toIndentedString(geometry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FEATURE("Feature");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {

      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

}

