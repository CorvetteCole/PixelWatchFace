/*
 * Locationforecast_2_0
 * Weather forecast for a specified place
 *
 * OpenAPI spec version: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.corvettecole.pixelwatchface.api.owm.models;


import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * A identifier that corresponds to a weather condition at https://openweathermap.org/weather-conditions.
 */
@JsonAdapter(WeatherCondition.Adapter.class)
public enum WeatherCondition {

  LIGHT_RAIN_THUNDERSTORM(200),
  RAIN_THUNDERSTORM(201),
  HEAVY_RAIN_THUNDERSTORM(202),
  LIGHT_THUNDERSTORM(210),
  THUNDERSTORM(211),
  HEAVY_THUNDERSTORM(212),
  RAGGED_THUNDERSTORM(221),
  LIGHT_DRIZZLE_THUNDERSTORM(230),
  DRIZZLE_THUNDERSTORM(231),
  HEAVY_DRIZZLE_THUNDERSTORM(232),

  LIGHT_DRIZZLE(300),
  DRIZZLE(301),
  HEAVY_DRIZZLE(302),
  LIGHT_DRIZZLE_RAIN(310),
  DRIZZLE_RAIN(311),
  HEAVY_DRIZZLE_RAIN(312),
  SHOWER_RAIN_DRIZZLE(313),
  HEAVY_SHOWER_RAIN_DRIZZLE(314),
  SHOWER_DRIZZLE(321),


  LIGHT_RAIN(500),
  MODERATE_RAIN(501),
  HEAVY_RAIN(502),
  VERY_HEAVY_RAIN(503),
  EXTREME_RAIN(504),
  FREEZING_RAIN(511),
  LIGHT_SHOWER_RAIN(520),
  SHOWER_RAIN(521),
  HEAVY_SHOWER_RAIN(522),
  RAGGED_SHOWER_RAIN(531),


  LIGHT_SNOW(600),
  SNOW(601),
  HEAVY_SNOW(602),
  SLEET(611),
  LIGHT_SHOWER_SLEET(612),
  SHOWER_SLEET(613),
  LIGHT_RAIN_SNOW(615),
  RAIN_SNOW(616),
  LIGHT_SHOWER_SNOW(620),
  SHOWER_SNOW(621),
  HEAVY_SHOWER_SNOW(622),

  MIST(701),
  SMOKE(711),
  HAZE(721),
  DUST_WHIRLS(731),
  FOG(741),
  SAND(751),
  DUST(761),
  ASH(762),
  SQUALL(771),
  TORNADO(781),

  CLEAR(800),
  CLOUDS_FEW(801),
  CLOUDS_SCATTERED(802),
  CLOUDS_BROKEN(803),
  CLOUDS_OVERCAST(804);


  private Integer value;

  WeatherCondition(Integer value) {
    this.value = value;
  }

  public static WeatherCondition fromValue(Integer value) {
    for (WeatherCondition b : WeatherCondition.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    return null;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static class Adapter extends TypeAdapter<WeatherCondition> {

    @Override
    public void write(final JsonWriter jsonWriter, final WeatherCondition enumeration)
        throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WeatherCondition read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return WeatherCondition.fromValue(value);
    }
  }
}

